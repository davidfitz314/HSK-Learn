{"version":3,"sources":["components/navigation/NavBar.tsx","components/navigation/Footer.tsx","components/flashCardsSimple/CardFace.tsx","components/flashCardsSimple/Card.tsx","components/flashCardsSimple/CardPageNavigation.tsx","components/flashCardsSimple/CardDisplay.tsx","components/flashCardsSimple/BodyWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","navBar","flexGrow","margin","borderRadius","padding","textAlign","paper","spacing","backgroundColor","color","palette","text","secondary","line","border","title","fontStyle","textDecoration","description","marginTop","marginBottom","NavBar","props","classes","id","className","Grid","container","justify","item","xs","Button","onClick","setPage","style","footer","width","height","position","bottom","descriptionBold","fontWeight","Footer","createStyles","cardStyle","fontSize","help","fontFamily","HtmlTooltip","withStyles","tooltip","maxWidth","typography","pxToRem","Tooltip","CardFace","hint","flip","placement","Fragment","Card","card","english","useState","flipped","setFlipped","setCardFlip","isFlipped","infinite","key","chinese","pinyin","content","gridSpacing","CardPageNavigation","items","cardsPerPage","page","setEnglish","cardsArray","outArray","i","j","length","innerArray","push","getCardsPerPage","alignItems","map","right","marginLeft","IconButton","aria-label","marginRight","appBar","textColor","flex","formControl","minWidth","selectEmpty","CardDisplay","cardObj","open","handleClose","selected","setSelected","numsArray","Dialog","fullScreen","onClose","AppBar","direction","paddingLeft","Typography","variant","type","paddingRight","FormControl","Select","value","defaultValue","onChange","name","target","num","MenuItem","button","bodyWrapper","primary","BodyWrapper","level","allCardWords","currentLevel","children","category","setSelectedCategory","setOpen","openCategoryDialog","cat","alignContent","subject","App","setLevel","levels","level1","level2","currentCardLevel","setCurrentCardLevel","useEffect","forEach","group","each","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bee8cf9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navBar: {\r\n        flexGrow: 1,\r\n        margin: 0,\r\n        borderRadius: '5px',\r\n        padding: '0 5px',\r\n        textAlign: 'center',\r\n    },\r\n    paper: {\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(8)}px `,\r\n        backgroundColor: '#d3E145',\r\n        color: theme.palette.text.secondary,\r\n        margin: theme.spacing(0),\r\n    },\r\n    line: {\r\n        border: '1px solid #aeb301',\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        textDecoration: 'underline',\r\n        color: '#bfc90f',\r\n    },\r\n    description: {\r\n        marginTop: `-${theme.spacing(1.5)}px`,\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        marginBottom: theme.spacing(2.5),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ntype NavBarProps = {\r\n    id: string,\r\n    setPage: (num: number) => void,\r\n}\r\n\r\nexport const NavBar = (props: NavBarProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div id={props.id}>\r\n            <h1 className={classes.title}>HSK Practice</h1>\r\n            <div className={classes.description}>Get yourself ready for your HSK Exam by practicing with flashcards.</div>\r\n            <div className={classes.navBar}>\r\n                <hr className={classes.line} />\r\n                <Grid container className={classes.navBar} justify='center'>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(1)}>Level 1</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(2)}>Level 2</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(3)}>Level 3</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(4)}>Level 4</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(5)}>Level 5</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(6)}>Level 6</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <hr className={classes.line} style={{ marginBottom: 0 }} />\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    footer: {\r\n        margin: 0,\r\n        width: '100%',\r\n        height: '56px',\r\n        textAlign: 'center',\r\n        backgroundColor: '#00a500',\r\n        position: 'fixed', \r\n        bottom: '0px',\r\n    },\r\n    description: {\r\n        marginTop: '16px',\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    descriptionBold: {\r\n        marginTop: '16px',\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        color: theme.palette.text.secondary,\r\n        fontWeight: 'bold',\r\n    },\r\n}));\r\n\r\nexport const Footer = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.footer}>\r\n            <div className={classes.descriptionBold}><span className={classes.description}>COPYRIGHT ©</span> 2020 David Chen-Fitzgerald</div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    cardStyle: {\r\n        backgroundColor: '#00a500',\r\n        margin: 'auto',\r\n        width: '100%',\r\n        padding: `${theme.spacing(15)}px ${theme.spacing(0)}px`,\r\n        textAlign: 'center',\r\n        border: '1px solid #aeb301',\r\n        borderRadius: theme.spacing(3),\r\n        fontWeight: 'bold',\r\n        fontSize: '150%',\r\n    },\r\n    help: {\r\n        color: '#006400',\r\n        backgroundColor: '#00a500',\r\n        \"&:hover\": {\r\n            color: '#bfc90f',\r\n            backgroundColor: '#00a500',\r\n        }\r\n    },\r\n    text: {\r\n        color: '#d3E145',\r\n        fontFamily: 'Tahoma, Helvetica, Arial, \"Microsoft Yahei\",\"????\", STXihei, \"????\", sans-serif',\r\n    }\r\n}));\r\n\r\ntype cardFaceProps = {\r\n    text: string,\r\n    hint?: string,\r\n    flip: () => void;\r\n}\r\n\r\nconst HtmlTooltip = withStyles((theme: Theme) => ({\r\n    tooltip: {\r\n      backgroundColor: '#f5f5f9',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      maxWidth: 220,\r\n      fontSize: theme.typography.pxToRem(14),\r\n      border: '1px solid #dadde9',\r\n    },\r\n  }))(Tooltip);\r\n\r\nexport const CardFace = ({text, hint, flip}: cardFaceProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div onClick={()=>flip()} className={classes.cardStyle}>\r\n            <h1 className={classes.text}>\r\n                {text}\r\n            </h1>\r\n            {hint && (\r\n                <HtmlTooltip\r\n                    placement='bottom'\r\n                    title={\r\n                    <React.Fragment>\r\n                        <h3>{hint}</h3>\r\n                    </React.Fragment>\r\n                    }\r\n                >\r\n                <EmojiObjectsIcon className={classes.help} />\r\n                </HtmlTooltip>\r\n            )}\r\n        </div>\r\n    )\r\n};","import React, { useState } from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport { CardFace } from './CardFace';\r\nimport { languageGroups } from './Utils/Types';\r\n\r\ntype cardTypes = {\r\n    card: languageGroups,\r\n    english: boolean,\r\n}\r\n\r\nexport const Card = ({ card, english}: cardTypes) => {\r\n    const [flipped, setFlipped] = useState(false);\r\n    const setCardFlip = () => setFlipped(!flipped);\r\n    return (\r\n        <>\r\n        {!english && (\r\n            <ReactCardFlip isFlipped={flipped} infinite>\r\n                <CardFace key=\"front\" text={card.chinese} flip={setCardFlip} hint={card.pinyin} />\r\n                <CardFace key=\"back\" text={card.english} flip={setCardFlip} />\r\n            </ReactCardFlip>)}\r\n        {english && (\r\n            <ReactCardFlip isFlipped={flipped} infinite>\r\n                <CardFace key=\"front\" text={card.english} flip={setCardFlip} />\r\n                <CardFace key=\"back\" text={card.chinese} flip={setCardFlip} hint={card.pinyin} />\r\n            </ReactCardFlip>\r\n        )}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Card } from './Card';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { languageGroups } from './Utils/Types';\r\nimport ArrowBackOutlined from '@material-ui/icons/ArrowBackIosOutlined';\r\nimport ArrowForwardOutlined from '@material-ui/icons/ArrowForwardIosOutlined'\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    content: {\r\n        marginTop: theme.spacing(8),\r\n    },\r\n    gridSpacing: {\r\n        margin: theme.spacing(2),\r\n    },\r\n}));\r\n\r\ntype cardPageNavProps = {\r\n    items: languageGroups[],\r\n    cardsPerPage: number,\r\n    page: number,\r\n    setPage: (num: number) => void,\r\n    english: boolean,\r\n    setEnglish: (isEng: boolean) => void,\r\n}\r\n\r\nconst getCardsPerPage = (items: languageGroups[], cardsPerPage: number) => {\r\n    const outArray = [];\r\n    var i = 0;\r\n    var j = 0;\r\n    while (i !== items.length){\r\n        const innerArray: languageGroups[] = [];\r\n        while (j < cardsPerPage){\r\n            innerArray.push(items[i])\r\n            i++;\r\n            j++;\r\n            if (i >= items.length) break;\r\n        }\r\n        outArray.push(innerArray);\r\n        j = 0;\r\n    }\r\n    return outArray;\r\n}\r\n\r\nexport const CardPageNavigation = ({items, cardsPerPage, page, setPage, english, setEnglish}: cardPageNavProps) => {\r\n    const classes = useStyles();\r\n    // const shuffledItems = shuffle(items);\r\n    const cardsArray: languageGroups[][] = getCardsPerPage(items, cardsPerPage);\r\n    const nextPage = () => { \r\n        if (cardsArray.length - 1 > page) {\r\n            setPage(page+1);\r\n        } else {\r\n            setPage(0);\r\n        }\r\n    }\r\n    const prevPage = () => {\r\n        if (page > 0){\r\n            setPage(page - 1);\r\n        } else {\r\n            setPage(cardsArray.length - 1);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.content}>\r\n        <Grid container alignItems='center' justify='center' style={{ color: '#d3E145' }}>\r\n            {cardsArray[page] && cardsArray[page].map((item, key) => {\r\n            return (\r\n                    <Grid key={key} item xs={2} className={classes.gridSpacing}>\r\n                        <Card card={item} key={key} english={english} />\r\n                    </Grid>\r\n                );\r\n            })}\r\n        </Grid>\r\n        <Grid container alignItems='center' justify='center' style={{ position: 'fixed', bottom: 0,\r\n  right: 0 }}>\r\n            <Grid item xs style={{ textAlign: 'right', marginLeft: '32px', color: '#006400' }}>\r\n                <IconButton color=\"inherit\" onClick={()=>{prevPage()}} aria-label=\"back\">\r\n                    <ArrowBackOutlined fontSize='large' aria-label='back' />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid item xs style={{ textAlign: 'center', color: '#006400'  }}>\r\n                <h3>Page: {page+1}</h3>\r\n            </Grid>\r\n            <Grid item xs  style={{ textAlign: 'left', marginRight: '32px', color: '#006400' }}>\r\n                <IconButton color=\"inherit\" onClick={()=>{nextPage()}} aria-label=\"forward\">\r\n                    <ArrowForwardOutlined fontSize='large' aria-label='forward' />\r\n                </IconButton>\r\n            </Grid>\r\n        </Grid>\r\n        <IconButton  color=\"inherit\" onClick={()=>setEnglish(!english)} style={{ height: '32px', width: '32px', position: 'fixed', bottom: '12px', right: '32px', border: ' 1.5px solid #006400' }} aria-label=\"forward\">\r\n            <p style={{ fontSize: 'medium', color: '#006400' }}>{english ? 'EN' : 'CN'}</p>\r\n        </IconButton>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport CloseOutlined from '@material-ui/icons/CloseOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { cardGroups } from './Utils/Types';\r\nimport { CardPageNavigation } from './CardPageNavigation';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: 'fixed',\r\n        backgroundColor: '#00a500',\r\n        color: '#d3E145',\r\n        textColor: '#d3E145',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 80,\r\n        color: '#d3E145',\r\n        textColor: '#d3E145',\r\n    },\r\n    selectEmpty: {\r\n        color: '#d3E145',\r\n        textColor: '#d3E145',\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\ntype cardProps = {\r\n    cardObj: cardGroups,\r\n    open: boolean,\r\n    handleClose: () => void,\r\n    selected: number,\r\n    setSelected: (num: number) => void,\r\n    page: number,\r\n    setPage: (num:number) => void;\r\n    english: boolean,\r\n    setEnglish: (isEng: boolean) => void,\r\n}\r\n\r\nexport const CardDisplay = ({ cardObj, open, handleClose, selected, setSelected, setPage, page, english, setEnglish }: cardProps) => {\r\n    const { items } = cardObj;\r\n    const classes = useStyles();\r\n    const numsArray: number[] = [];\r\n    for (var i = 0; i < items.length; i++){\r\n        if (i === 0){\r\n            numsArray.push(i+1);\r\n        }\r\n        if (items.length === 1) break;\r\n        if (items.length < 5 && items.length - 1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        } else if (items.length > 5 && items.length < 10 && i % 2 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        } else if (items.length > 10 && items.length < 20 && i % 3 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        }else if (items.length > 20 && i % 10 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        }\r\n        if (items.length - 1 === i){\r\n            numsArray.push(i+1);\r\n        }\r\n    }\r\n    const handleChange = (value: number) => {\r\n        setSelected(value);\r\n        setPage(0);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <Dialog fullScreen open={open} onClose={handleClose}>\r\n                <AppBar className={classes.appBar}>\r\n                    <Grid container  alignItems='center' justify='space-around' direction=\"row\">\r\n                        <Grid item xs style={{ paddingLeft: '16px' }}>\r\n                            <IconButton color=\"inherit\" onClick={handleClose} aria-label=\"back\">\r\n                                <CloseOutlined aria-label='back' />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item xs style={{textAlign: 'center' }}>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {`Category: `}<strong>{cardObj.type}</strong>\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs style={{ textAlign: 'right', paddingRight: '20px' }}>\r\n                            <Grid container alignItems='center' justify='flex-end' direction='row'>\r\n                                <Grid item xs={8} style={{ textAlign: 'right' }}>\r\n                                    <p>Cards Shown</p>\r\n                                </Grid>\r\n                                <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n                                    <FormControl className={classes.formControl}>\r\n                                        <Select\r\n                                        id=\"select-card-numbers-id\"\r\n                                        value={selected}\r\n                                        defaultValue={1}\r\n                                        onChange={(name) => {name && handleChange(name.target.value as number)}}\r\n                                        className={classes.selectEmpty}\r\n                                        >\r\n                                            {numsArray.map((num, key) => {\r\n                                                return (\r\n                                                    <MenuItem value={num} key={key}>{num}</MenuItem>\r\n                                                );\r\n                                            })}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n                <CardPageNavigation items={cardObj.items} cardsPerPage={selected} page={page} setPage={setPage} english={english} setEnglish={setEnglish} />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CardDisplay } from './CardDisplay';\r\nimport { languageGroups, cardGroups } from './Utils/Types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    button: {\r\n        backgroundColor: '#bfc90f',\r\n        width: '95%',\r\n        margin: '5px',\r\n    },\r\n    bodyWrapper: {\r\n        margin: '0 auto',\r\n        maxWidth: '940px',\r\n        backgroundColor: '#f0f4bf',\r\n        textAlign: 'center',\r\n        padding: '25px 15px',\r\n        color: theme.palette.text.primary,\r\n      }\r\n}));\r\n\r\ntype bodyWrapperProps = {\r\n    children?: any,\r\n    currentLevel: number,\r\n    level: cardGroups[],\r\n    allCardWords: languageGroups[],\r\n}\r\n\r\n//TODO: expand currentLevel block as more is added in\r\nexport const BodyWrapper = ({ level, allCardWords, currentLevel, children}: bodyWrapperProps ) => {\r\n    const classes = useStyles();\r\n    const [category, setSelectedCategory] = useState<cardGroups>(level[0]);\r\n    const [open, setOpen] = useState(false);\r\n    const [selected, setSelected] = useState<number>(1);\r\n    const [page, setPage] = useState(0);\r\n    const [english, setEnglish] = useState<boolean>(false);\r\n    const openCategoryDialog = (cat: cardGroups) => {\r\n        setSelectedCategory(cat);\r\n        setOpen(true);\r\n    }\r\n    const closeCategoryDialog = () => {\r\n        setOpen(false);\r\n        setSelected(1);\r\n        setPage(0);\r\n    }\r\n    return (\r\n        <div className={classes.bodyWrapper}>\r\n            <h3>HSK Level {currentLevel}</h3>\r\n            <Grid container alignContent='stretch'>\r\n                {currentLevel <= 2 && level && level.map((subject, key) => {\r\n                    return (\r\n                        <Grid item xs={4} key={key}>\r\n                            <Button className={classes.button} onClick={()=>openCategoryDialog(subject)}>{subject.type}</Button>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                <Grid item xs={4}>\r\n                    <Button className={classes.button} onClick={()=>openCategoryDialog({ type: 'All Cards', items: allCardWords })}>All Cards</Button>\r\n                </Grid>\r\n            </Grid>\r\n            <CardDisplay cardObj={category} open={open} handleClose={closeCategoryDialog} selected={selected} setSelected={setSelected} page={page} setPage={setPage} english={english} setEnglish={setEnglish} />\r\n            {children}\r\n            <IconButton id=\"iconButton\"  color=\"inherit\" onClick={()=>setEnglish(!english)} style={{ height: '32px', width: '32px', position: 'fixed', bottom: '12px', right: '32px', border: ' 1.5px solid #006400' }} aria-label=\"forward\">\r\n                <p style={{ fontSize: 'medium', color: '#006400' }}>{english ? 'EN' : 'CN'}</p>\r\n            </IconButton>\r\n            <IconButton id=\"iconButton\"  color=\"inherit\" onClick={()=>{}} style={{ height: '32px', width: '32px', position: 'fixed', bottom: '12px', right: '82px', border: ' 1.5px solid #006400' }} aria-label=\"forward\">\r\n                <SportsEsportsIcon></SportsEsportsIcon>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React,  { useState, useEffect } from 'react';\nimport { NavBar } from './components/navigation/NavBar';\nimport { Footer } from './components/navigation/Footer';\nimport { BodyWrapper } from './components/flashCardsSimple/BodyWrapper';\nimport { languageGroups } from './components/flashCardsSimple/Utils/Types';\nimport { cardGroups } from './components/flashCardsSimple/Utils/Types';\nimport level1 from './jsontextfiles/level1.json';\nimport level2 from './jsontextfiles/level2.json';\n\n//TODO: since card levels are built on top of eachother maybe add a way to remove previous level cards\nfunction App() {\n  const [level, setLevel] = useState(1);\n  const levels = [level1, level2];\n  const allCardWords: languageGroups[] = [];\n  const [currentCardLevel, setCurrentCardLevel] = useState<cardGroups[]>();\n  useEffect(() => {\n    if (level <= 2) {\n      setCurrentCardLevel(levels[level-1]);\n      levels[level - 1].forEach(group => group.items.map(each => allCardWords.push(each)));\n    }\n    else {\n      setCurrentCardLevel(levels[0]);\n      levels[0].forEach(group => group.items.map(each => allCardWords.push(each)));\n    }\n  }, [level, allCardWords, levels])\n  \n    \n  return (\n    <div id=\"wrapper\">\n      <NavBar id=\"header\" setPage={setLevel} />\n      {currentCardLevel && (<BodyWrapper currentLevel={level} allCardWords={allCardWords} level={currentCardLevel} />)}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}