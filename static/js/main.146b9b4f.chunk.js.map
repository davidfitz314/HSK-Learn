{"version":3,"sources":["components/NavBar.tsx","components/CardFace.tsx","components/Card.tsx","components/CardPageNavigation.tsx","components/CardDisplay.tsx","components/BodyWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","navBar","flexGrow","margin","borderRadius","padding","textAlign","paper","spacing","backgroundColor","color","palette","text","secondary","line","border","title","fontStyle","textDecoration","description","marginTop","marginBottom","NavBar","props","classes","id","className","Grid","container","justify","item","xs","Button","onClick","setPage","style","createStyles","cardStyle","width","CardFace","flip","hint","Card","useState","flipped","setFlipped","setCardFlip","isFlipped","infinite","key","card","chinese","pinyin","english","appBar","position","marginLeft","flex","gridSpacing","CardPageNavigation","items","cardsPerPage","page","length","maxPage","nextPage","prevPage","alignItems","map","formControl","minWidth","textColor","selectEmpty","CardDisplay","cardObj","open","handleClose","selected","setSelected","numsArray","i","push","Dialog","fullScreen","onClose","AppBar","direction","paddingLeft","IconButton","aria-label","Typography","variant","type","paddingRight","FormControl","Select","value","defaultValue","onChange","name","target","num","MenuItem","button","bodyWrapper","maxWidth","primary","BodyWrapper","allCardWords","level1","group","each","category","setSelectedCategory","setOpen","openCategoryDialog","cat","currentLevel","alignContent","subject","children","App","level","setLevel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.146b9b4f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navBar: {\r\n        flexGrow: 1,\r\n        margin: 0,\r\n        borderRadius: '5px',\r\n        padding: '0 5px',\r\n        textAlign: 'center',\r\n    },\r\n    paper: {\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(8)}px `,\r\n        backgroundColor: '#d3E145',\r\n        color: theme.palette.text.secondary,\r\n        margin: theme.spacing(0),\r\n    },\r\n    line: {\r\n        border: '1px solid #aeb301',\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        textDecoration: 'underline',\r\n        color: '#bfc90f',\r\n    },\r\n    description: {\r\n        marginTop: `-${theme.spacing(1.5)}px`,\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        marginBottom: theme.spacing(2.5),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ntype NavBarProps = {\r\n    id: string,\r\n    setPage: (num: number) => void,\r\n}\r\n\r\nexport const NavBar = (props: NavBarProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div id={props.id}>\r\n            <h1 className={classes.title}>HSK Practice</h1>\r\n            <div className={classes.description}>Get yourself ready for your HSK Exam by practicing with flashcards.</div>\r\n            <div className={classes.navBar}>\r\n                <hr className={classes.line} />\r\n                <Grid container className={classes.navBar} justify='center'>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(1)}>Level 1</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(2)}>Level 2</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(3)}>Level 3</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(4)}>Level 4</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(5)}>Level 5</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(6)}>Level 6</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <hr className={classes.line} style={{ marginBottom: 0 }} />\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    cardStyle: {\r\n        backgroundColor: '#00a500',\r\n        margin: 'auto',\r\n        width: '100%',\r\n        padding: `${theme.spacing(15)}px ${theme.spacing(0)}px`,\r\n        textAlign: 'center',\r\n        border: '1px solid #aeb301',\r\n        borderRadius: theme.spacing(3),\r\n    }\r\n}));\r\n\r\ntype cardFaceProps = {\r\n    text: string,\r\n    hint?: string,\r\n    flip: () => void;\r\n}\r\n\r\nexport const CardFace = ({text, hint, flip}: cardFaceProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div onClick={()=>flip()} className={classes.cardStyle}><h2>{text}</h2></div>\r\n    )\r\n};","import React, { useState } from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport { CardFace } from './CardFace';\r\nimport { languageGroups } from './Utils/Types';\r\n\r\ntype cardTypes = {\r\n    card: languageGroups,\r\n    nextPage: () => void,\r\n    prevPage: () => void,\r\n}\r\n\r\nexport const Card = (props: cardTypes) => {\r\n    const [flipped, setFlipped] = useState(false);\r\n    const setCardFlip = () => setFlipped(!flipped);\r\n    return (\r\n        <ReactCardFlip isFlipped={flipped} infinite>\r\n            <CardFace key=\"front\" text={props.card.chinese} flip={setCardFlip} hint={props.card.pinyin} />\r\n            <CardFace key=\"back\" text={props.card.english} flip={setCardFlip} />\r\n        </ReactCardFlip>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Card } from './Card';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { languageGroups } from './Utils/Types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: 'relative',\r\n        backgroundColor: '#00a500',\r\n        \r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    gridSpacing: {\r\n        margin: theme.spacing(2),\r\n    },\r\n}));\r\n\r\ntype cardPageNavProps = {\r\n    items: languageGroups[],\r\n    cardsPerPage: number,\r\n}\r\n\r\nexport const CardPageNavigation = ({items, cardsPerPage}: cardPageNavProps) => {\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [maxPage, setMaxPage] = useState((items.length) / cardsPerPage)\r\n    const nextPage = () => { \r\n        if (maxPage - 1 > page) {\r\n            setPage(page+1);\r\n        } else {\r\n            setPage(0);\r\n        }\r\n    }\r\n    const prevPage = () => {\r\n        if (page > 0){\r\n            setPage(page - 1);\r\n        } else {\r\n            setPage(maxPage - 1);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n        <Grid container alignItems='center' justify='center'>\r\n            {items && items.map((item, key) => {\r\n            return (\r\n                    <Grid key={key} item xs={2} className={classes.gridSpacing}>\r\n                        <Card card={item} key={key} nextPage={nextPage} prevPage={prevPage} />\r\n                    </Grid>\r\n                );\r\n            })}\r\n        </Grid>\r\n        <p style={{ textAlign: 'center' }}>Page: {page}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { cardGroups } from './Utils/Types';\r\nimport { CardPageNavigation } from './CardPageNavigation';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: 'relative',\r\n        backgroundColor: '#00a500',\r\n        \r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    gridSpacing: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 80,\r\n        color: 'white',\r\n        textColor: 'white',\r\n    },\r\n    selectEmpty: {\r\n        color: 'white',\r\n        textColor: 'white',\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\ntype cardProps = {\r\n    cardObj: cardGroups,\r\n    open: boolean,\r\n    handleClose: () => void,\r\n    selected: number,\r\n    setSelected: (num: number) => void,\r\n}\r\n\r\nexport const CardDisplay = ({ cardObj, open, handleClose, selected, setSelected }: cardProps) => {\r\n    const { items } = cardObj;\r\n    const classes = useStyles();\r\n    const numsArray: number[] = [];\r\n    for (var i = 0; i < items.length; i++){\r\n        if (i === 0){\r\n            numsArray.push(i+1);\r\n        }\r\n        if (items.length === 1) break;\r\n        if (items.length < 5 && items.length - 1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        } else if (items.length > 5 && items.length < 10 && i % 2 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        } else if (items.length > 10 && items.length < 20 && i % 3 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        }else if (items.length > 20 && i % 10 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        }\r\n        if (items.length - 1 === i){\r\n            numsArray.push(i+1);\r\n        }\r\n    }\r\n    const handleChange = (value: number) => {\r\n        setSelected(value);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <Dialog fullScreen open={open} onClose={handleClose}>\r\n                <AppBar className={classes.appBar}>\r\n                    <Grid container  alignItems='center' justify='space-around' direction=\"row\">\r\n                        <Grid item xs style={{ paddingLeft: '16px' }}>\r\n                            <IconButton color=\"inherit\" onClick={handleClose} aria-label=\"back\">\r\n                                <ArrowBackIcon aria-label='back' />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item xs style={{textAlign: 'center' }}>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {`Category: `}<strong>{cardObj.type}</strong>\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs style={{ textAlign: 'right', paddingRight: '20px' }}>\r\n                            <Grid container alignItems='center' justify='flex-end' direction='row'>\r\n                                <Grid item xs={8} style={{ textAlign: 'right' }}>\r\n                                    <p>Cards Shown</p>\r\n                                </Grid>\r\n                                <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n                                    <FormControl className={classes.formControl}>\r\n                                        <Select\r\n                                        id=\"select-card-numbers-id\"\r\n                                        value={selected}\r\n                                        defaultValue={1}\r\n                                        onChange={(name) => {name && handleChange(name.target.value as number)}}\r\n                                        className={classes.selectEmpty}\r\n                                        >\r\n                                            {numsArray.map((num, key) => {\r\n                                                return (\r\n                                                    <MenuItem value={num} key={key}>{num}</MenuItem>\r\n                                                );\r\n                                            })}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n                <CardPageNavigation items={cardObj.items} cardsPerPage={selected} />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport level1 from '../jsontextfiles/level1.json';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CardDisplay } from './CardDisplay';\r\nimport { languageGroups, cardGroups } from './Utils/Types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    button: {\r\n        backgroundColor: '#bfc90f',\r\n        width: '95%',\r\n        margin: '5px',\r\n    },\r\n    bodyWrapper: {\r\n        margin: '0 auto',\r\n        maxWidth: '940px',\r\n        backgroundColor: '#f0f4bf',\r\n        textAlign: 'center',\r\n        padding: '25px 15px',\r\n        color: theme.palette.text.primary,\r\n      }\r\n}));\r\n\r\ntype bodyWrapperProps = {\r\n    children?: any,\r\n    currentLevel: number,\r\n}\r\n\r\nexport const BodyWrapper = (props: bodyWrapperProps ) => {\r\n    const classes = useStyles();\r\n    const allCardWords: languageGroups[] = [];\r\n    level1.map(group => group.items.map(each => allCardWords.push(each)));\r\n    const [category, setSelectedCategory] = useState<cardGroups>({ type: \"All Cards\", items: allCardWords });\r\n    const [open, setOpen] = useState(false);\r\n    const [selected, setSelected] = useState<number>(1);\r\n    const openCategoryDialog = (cat: cardGroups) => {\r\n        setSelectedCategory(cat);\r\n        setOpen(true);\r\n    }\r\n    const closeCategoryDialog = () => {\r\n        setSelectedCategory({ type: \"All Cards\", items: allCardWords });\r\n        setSelected(1);\r\n        setOpen(false);\r\n    }\r\n    return (\r\n        <div className={classes.bodyWrapper}>\r\n            <h3>HSK Level {props.currentLevel}</h3>\r\n            <Grid container alignContent='stretch'>\r\n                {props.currentLevel === 1 && level1 && level1.map((subject, key) => {\r\n                    return (\r\n                        <Grid item xs={4} key={key}>\r\n                            <Button className={classes.button} onClick={()=>openCategoryDialog(subject)}>{subject.type}</Button>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                <Grid item xs={4}>\r\n                    <Button className={classes.button} onClick={()=>openCategoryDialog({ type: 'All Cards', items: allCardWords })}>All Cards</Button>\r\n                </Grid>\r\n            </Grid>\r\n            <CardDisplay cardObj={category} open={open} handleClose={closeCategoryDialog} selected={selected} setSelected={setSelected} />\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React,  { useState } from 'react';\nimport { NavBar } from './components/NavBar';\nimport { BodyWrapper } from './components/BodyWrapper';\n\nfunction App() {\n  const [level, setLevel] = useState(1);\n  return (\n    <div id=\"wrapper\">\n      <NavBar id=\"header\" setPage={setLevel} />\n      <BodyWrapper currentLevel={level}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}