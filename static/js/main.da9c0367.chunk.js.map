{"version":3,"sources":["components/NavBar.tsx","components/CardFace.tsx","components/Card.tsx","components/CardPageNavigation.tsx","components/CardDisplay.tsx","components/BodyWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","navBar","flexGrow","margin","borderRadius","padding","textAlign","paper","spacing","backgroundColor","color","palette","text","secondary","line","border","title","fontStyle","textDecoration","description","marginTop","marginBottom","NavBar","props","classes","id","className","Grid","container","justify","item","xs","Button","onClick","setPage","style","createStyles","cardStyle","width","help","HtmlTooltip","withStyles","tooltip","maxWidth","fontSize","typography","pxToRem","Tooltip","CardFace","hint","flip","placement","Fragment","Card","card","english","useState","flipped","setFlipped","setCardFlip","isFlipped","infinite","key","chinese","pinyin","content","gridSpacing","CardPageNavigation","items","cardsPerPage","page","setEnglish","cardsArray","outArray","i","j","length","innerArray","push","getCardsPerPage","alignItems","map","position","bottom","right","marginLeft","IconButton","aria-label","marginRight","height","appBar","textColor","flex","formControl","minWidth","selectEmpty","CardDisplay","cardObj","open","handleClose","selected","setSelected","numsArray","Dialog","fullScreen","onClose","AppBar","direction","paddingLeft","Typography","variant","type","paddingRight","FormControl","Select","value","defaultValue","onChange","name","target","num","MenuItem","button","bodyWrapper","primary","BodyWrapper","level","allCardWords","currentLevel","children","category","setSelectedCategory","setOpen","openCategoryDialog","cat","alignContent","subject","App","setLevel","level1","group","each","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da9c0367.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navBar: {\r\n        flexGrow: 1,\r\n        margin: 0,\r\n        borderRadius: '5px',\r\n        padding: '0 5px',\r\n        textAlign: 'center',\r\n    },\r\n    paper: {\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(8)}px `,\r\n        backgroundColor: '#d3E145',\r\n        color: theme.palette.text.secondary,\r\n        margin: theme.spacing(0),\r\n    },\r\n    line: {\r\n        border: '1px solid #aeb301',\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        textDecoration: 'underline',\r\n        color: '#bfc90f',\r\n    },\r\n    description: {\r\n        marginTop: `-${theme.spacing(1.5)}px`,\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        marginBottom: theme.spacing(2.5),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ntype NavBarProps = {\r\n    id: string,\r\n    setPage: (num: number) => void,\r\n}\r\n\r\nexport const NavBar = (props: NavBarProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div id={props.id}>\r\n            <h1 className={classes.title}>HSK Practice</h1>\r\n            <div className={classes.description}>Get yourself ready for your HSK Exam by practicing with flashcards.</div>\r\n            <div className={classes.navBar}>\r\n                <hr className={classes.line} />\r\n                <Grid container className={classes.navBar} justify='center'>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(1)}>Level 1</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(2)}>Level 2</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(3)}>Level 3</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(4)}>Level 4</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(5)}>Level 5</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(6)}>Level 6</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <hr className={classes.line} style={{ marginBottom: 0 }} />\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    cardStyle: {\r\n        backgroundColor: '#00a500',\r\n        margin: 'auto',\r\n        width: '100%',\r\n        padding: `${theme.spacing(15)}px ${theme.spacing(0)}px`,\r\n        textAlign: 'center',\r\n        border: '1px solid #aeb301',\r\n        borderRadius: theme.spacing(3),\r\n    },\r\n    help: {\r\n        color: '#006400',\r\n        backgroundColor: '#00a500',\r\n        \"&:hover\": {\r\n            color: '#bfc90f',\r\n            backgroundColor: '#00a500',\r\n        }\r\n    },\r\n    text: {\r\n        color: '#d3E145',\r\n    }\r\n}));\r\n\r\ntype cardFaceProps = {\r\n    text: string,\r\n    hint?: string,\r\n    flip: () => void;\r\n}\r\n\r\nconst HtmlTooltip = withStyles((theme: Theme) => ({\r\n    tooltip: {\r\n      backgroundColor: '#f5f5f9',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      maxWidth: 220,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: '1px solid #dadde9',\r\n    },\r\n  }))(Tooltip);\r\n\r\nexport const CardFace = ({text, hint, flip}: cardFaceProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div onClick={()=>flip()} className={classes.cardStyle}>\r\n            <h1 className={classes.text}>\r\n                {text}\r\n            </h1>\r\n            {hint && (\r\n                <HtmlTooltip\r\n                    placement='bottom'\r\n                    title={\r\n                    <React.Fragment>\r\n                        <h3>{hint}</h3>\r\n                    </React.Fragment>\r\n                    }\r\n                >\r\n                <EmojiObjectsIcon className={classes.help} />\r\n                </HtmlTooltip>\r\n            )}\r\n        </div>\r\n    )\r\n};","import React, { useState } from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport { CardFace } from './CardFace';\r\nimport { languageGroups } from './Utils/Types';\r\n\r\ntype cardTypes = {\r\n    card: languageGroups,\r\n    english: boolean,\r\n}\r\n\r\nexport const Card = ({ card, english}: cardTypes) => {\r\n    const [flipped, setFlipped] = useState(false);\r\n    const setCardFlip = () => setFlipped(!flipped);\r\n    return (\r\n        <>\r\n        {!english && (\r\n            <ReactCardFlip isFlipped={flipped} infinite>\r\n                <CardFace key=\"front\" text={card.chinese} flip={setCardFlip} hint={card.pinyin} />\r\n                <CardFace key=\"back\" text={card.english} flip={setCardFlip} />\r\n            </ReactCardFlip>)}\r\n        {english && (\r\n            <ReactCardFlip isFlipped={flipped} infinite>\r\n                <CardFace key=\"front\" text={card.english} flip={setCardFlip} />\r\n                <CardFace key=\"back\" text={card.chinese} flip={setCardFlip} hint={card.pinyin} />\r\n            </ReactCardFlip>\r\n        )}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Card } from './Card';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { languageGroups } from './Utils/Types';\r\nimport ArrowBackOutlined from '@material-ui/icons/ArrowBackIosOutlined';\r\nimport ArrowForwardOutlined from '@material-ui/icons/ArrowForwardIosOutlined'\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    content: {\r\n        marginTop: theme.spacing(8),\r\n    },\r\n    gridSpacing: {\r\n        margin: theme.spacing(2),\r\n    },\r\n}));\r\n\r\ntype cardPageNavProps = {\r\n    items: languageGroups[],\r\n    cardsPerPage: number,\r\n    page: number,\r\n    setPage: (num: number) => void,\r\n    english: boolean,\r\n    setEnglish: (isEng: boolean) => void,\r\n}\r\n\r\n// TODO: move shuffle higher in parents state\r\n// const shuffle = (array: languageGroups[]) => {\r\n//     return array.sort(() => Math.random() - 0.5);\r\n// }\r\n\r\nconst getCardsPerPage = (items: languageGroups[], cardsPerPage: number) => {\r\n    const outArray = [];\r\n    var i = 0;\r\n    var j = 0;\r\n    while (i !== items.length){\r\n        const innerArray: languageGroups[] = [];\r\n        while (j < cardsPerPage){\r\n            innerArray.push(items[i])\r\n            i++;\r\n            j++;\r\n            if (i >= items.length) break;\r\n        }\r\n        outArray.push(innerArray);\r\n        j = 0;\r\n    }\r\n    return outArray;\r\n}\r\n\r\nexport const CardPageNavigation = ({items, cardsPerPage, page, setPage, english, setEnglish}: cardPageNavProps) => {\r\n    const classes = useStyles();\r\n    // const shuffledItems = shuffle(items);\r\n    const cardsArray: languageGroups[][] = getCardsPerPage(items, cardsPerPage);\r\n    const nextPage = () => { \r\n        if (cardsArray.length - 1 > page) {\r\n            setPage(page+1);\r\n        } else {\r\n            setPage(0);\r\n        }\r\n    }\r\n    const prevPage = () => {\r\n        if (page > 0){\r\n            setPage(page - 1);\r\n        } else {\r\n            setPage(cardsArray.length - 1);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.content}>\r\n        <Grid container alignItems='center' justify='center' style={{ color: '#d3E145' }}>\r\n            {cardsArray[page] && cardsArray[page].map((item, key) => {\r\n            return (\r\n                    <Grid key={key} item xs={2} className={classes.gridSpacing}>\r\n                        <Card card={item} key={key} english={english} />\r\n                    </Grid>\r\n                );\r\n            })}\r\n        </Grid>\r\n        <Grid container alignItems='center' justify='center' style={{ position: 'fixed', bottom: 0,\r\n  right: 0 }}>\r\n            <Grid item xs style={{ textAlign: 'right', marginLeft: '32px', color: '#006400' }}>\r\n                <IconButton color=\"inherit\" onClick={()=>{prevPage()}} aria-label=\"back\">\r\n                    <ArrowBackOutlined fontSize='large' aria-label='back' />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid item xs style={{ textAlign: 'center', color: '#006400'  }}>\r\n                <h3>Page: {page+1}</h3>\r\n            </Grid>\r\n            <Grid item xs  style={{ textAlign: 'left', marginRight: '32px', color: '#006400' }}>\r\n                <IconButton color=\"inherit\" onClick={()=>{nextPage()}} aria-label=\"forward\">\r\n                    <ArrowForwardOutlined fontSize='large' aria-label='forward' />\r\n                </IconButton>\r\n            </Grid>\r\n        </Grid>\r\n        <IconButton  color=\"inherit\" onClick={()=>setEnglish(!english)} style={{ height: '32px', width: '32px', position: 'fixed', bottom: '12px', right: '32px', border: ' 1.5px solid #006400' }} aria-label=\"forward\">\r\n            <p style={{ fontSize: 'medium', color: '#006400' }}>{english ? 'EN' : 'CN'}</p>\r\n        </IconButton>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport CloseOutlined from '@material-ui/icons/CloseOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { cardGroups } from './Utils/Types';\r\nimport { CardPageNavigation } from './CardPageNavigation';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    appBar: {\r\n        position: 'fixed',\r\n        backgroundColor: '#00a500',\r\n        color: '#d3E145',\r\n        textColor: '#d3E145',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 80,\r\n        color: '#d3E145',\r\n        textColor: '#d3E145',\r\n    },\r\n    selectEmpty: {\r\n        color: '#d3E145',\r\n        textColor: '#d3E145',\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\ntype cardProps = {\r\n    cardObj: cardGroups,\r\n    open: boolean,\r\n    handleClose: () => void,\r\n    selected: number,\r\n    setSelected: (num: number) => void,\r\n    page: number,\r\n    setPage: (num:number) => void;\r\n    english: boolean,\r\n    setEnglish: (isEng: boolean) => void,\r\n}\r\n\r\nexport const CardDisplay = ({ cardObj, open, handleClose, selected, setSelected, setPage, page, english, setEnglish }: cardProps) => {\r\n    const { items } = cardObj;\r\n    const classes = useStyles();\r\n    const numsArray: number[] = [];\r\n    for (var i = 0; i < items.length; i++){\r\n        if (i === 0){\r\n            numsArray.push(i+1);\r\n        }\r\n        if (items.length === 1) break;\r\n        if (items.length < 5 && items.length - 1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        } else if (items.length > 5 && items.length < 10 && i % 2 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        } else if (items.length > 10 && items.length < 20 && i % 3 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        }else if (items.length > 20 && i % 10 === 0 && items.length -1 !== i && i > 0){\r\n            numsArray.push(i);\r\n        }\r\n        if (items.length - 1 === i){\r\n            numsArray.push(i+1);\r\n        }\r\n    }\r\n    const handleChange = (value: number) => {\r\n        setSelected(value);\r\n        setPage(0);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <Dialog fullScreen open={open} onClose={handleClose}>\r\n                <AppBar className={classes.appBar}>\r\n                    <Grid container  alignItems='center' justify='space-around' direction=\"row\">\r\n                        <Grid item xs style={{ paddingLeft: '16px' }}>\r\n                            <IconButton color=\"inherit\" onClick={handleClose} aria-label=\"back\">\r\n                                <CloseOutlined aria-label='back' />\r\n                            </IconButton>\r\n                        </Grid>\r\n                        <Grid item xs style={{textAlign: 'center' }}>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {`Category: `}<strong>{cardObj.type}</strong>\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs style={{ textAlign: 'right', paddingRight: '20px' }}>\r\n                            <Grid container alignItems='center' justify='flex-end' direction='row'>\r\n                                <Grid item xs={8} style={{ textAlign: 'right' }}>\r\n                                    <p>Cards Shown</p>\r\n                                </Grid>\r\n                                <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n                                    <FormControl className={classes.formControl}>\r\n                                        <Select\r\n                                        id=\"select-card-numbers-id\"\r\n                                        value={selected}\r\n                                        defaultValue={1}\r\n                                        onChange={(name) => {name && handleChange(name.target.value as number)}}\r\n                                        className={classes.selectEmpty}\r\n                                        >\r\n                                            {numsArray.map((num, key) => {\r\n                                                return (\r\n                                                    <MenuItem value={num} key={key}>{num}</MenuItem>\r\n                                                );\r\n                                            })}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n                <CardPageNavigation items={cardObj.items} cardsPerPage={selected} page={page} setPage={setPage} english={english} setEnglish={setEnglish} />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CardDisplay } from './CardDisplay';\r\nimport { languageGroups, cardGroups } from './Utils/Types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    button: {\r\n        backgroundColor: '#bfc90f',\r\n        width: '95%',\r\n        margin: '5px',\r\n    },\r\n    bodyWrapper: {\r\n        margin: '0 auto',\r\n        maxWidth: '940px',\r\n        backgroundColor: '#f0f4bf',\r\n        textAlign: 'center',\r\n        padding: '25px 15px',\r\n        color: theme.palette.text.primary,\r\n      }\r\n}));\r\n\r\ntype bodyWrapperProps = {\r\n    children?: any,\r\n    currentLevel: number,\r\n    level: cardGroups[],\r\n    allCardWords: languageGroups[],\r\n}\r\n\r\nexport const BodyWrapper = ({ level, allCardWords, currentLevel, children}: bodyWrapperProps ) => {\r\n    const classes = useStyles();\r\n    \r\n    const [category, setSelectedCategory] = useState<cardGroups>(level[0]);\r\n    const [open, setOpen] = useState(false);\r\n    const [selected, setSelected] = useState<number>(1);\r\n    const [page, setPage] = useState(0);\r\n    const [english, setEnglish] = useState<boolean>(false);\r\n    const openCategoryDialog = (cat: cardGroups) => {\r\n        setSelectedCategory(cat);\r\n        setOpen(true);\r\n    }\r\n    const closeCategoryDialog = () => {\r\n        setOpen(false);\r\n        setSelected(1);\r\n        setPage(0);\r\n    }\r\n    return (\r\n        <div className={classes.bodyWrapper}>\r\n            <h3>HSK Level {currentLevel}</h3>\r\n            <Grid container alignContent='stretch'>\r\n                {currentLevel === 1 && level && level.map((subject, key) => {\r\n                    return (\r\n                        <Grid item xs={4} key={key}>\r\n                            <Button className={classes.button} onClick={()=>openCategoryDialog(subject)}>{subject.type}</Button>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                <Grid item xs={4}>\r\n                    <Button className={classes.button} onClick={()=>openCategoryDialog({ type: 'All Cards', items: allCardWords })}>All Cards</Button>\r\n                </Grid>\r\n            </Grid>\r\n            <CardDisplay cardObj={category} open={open} handleClose={closeCategoryDialog} selected={selected} setSelected={setSelected} page={page} setPage={setPage} english={english} setEnglish={setEnglish} />\r\n            {children}\r\n            <IconButton  color=\"inherit\" onClick={()=>setEnglish(!english)} style={{ height: '32px', width: '32px', position: 'fixed', bottom: '12px', right: '32px', border: ' 1.5px solid #006400' }} aria-label=\"forward\">\r\n                <p style={{ fontSize: 'medium', color: '#006400' }}>{english ? 'EN' : 'CN'}</p>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React,  { useState } from 'react';\nimport { NavBar } from './components/NavBar';\nimport { BodyWrapper } from './components/BodyWrapper';\nimport { languageGroups } from './components/Utils/Types';\nimport level1 from './jsontextfiles/level1.json';\n\nfunction App() {\n  const [level, setLevel] = useState(1);\n  const allCardWords: languageGroups[] = [];\n  level1.map(group => group.items.map(each => allCardWords.push(each)));\n  return (\n    <div id=\"wrapper\">\n      <NavBar id=\"header\" setPage={setLevel} />\n      <BodyWrapper currentLevel={level} allCardWords={allCardWords} level={level1} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}