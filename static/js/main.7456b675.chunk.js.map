{"version":3,"sources":["components/NavBar.tsx","components/BodyWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","navBar","flexGrow","margin","borderRadius","padding","textAlign","paper","spacing","backgroundColor","color","palette","text","secondary","line","border","title","fontStyle","textDecoration","description","marginTop","marginBottom","NavBar","props","classes","id","className","Grid","container","justify","item","xs","Button","onClick","setPage","style","primary","BodyWrapper","currentLevel","level1","map","subject","key","type","children","App","useState","level","setLevel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7456b675.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navBar: {\r\n        flexGrow: 1,\r\n        margin: 0,\r\n        borderRadius: '5px',\r\n        padding: '0 5px',\r\n        textAlign: 'center',\r\n    },\r\n    paper: {\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(8)}px `,\r\n        \r\n        backgroundColor: '#d3E145',\r\n        color: theme.palette.text.secondary,\r\n        margin: theme.spacing(0),\r\n    },\r\n    line: {\r\n        border: '1px solid #aeb301',\r\n    },\r\n    title: {\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        textDecoration: 'underline',\r\n        color: '#bfc90f',\r\n    },\r\n    description: {\r\n        marginTop: `-${theme.spacing(1.5)}px`,\r\n        textAlign: 'center',\r\n        fontStyle: 'italic',\r\n        marginBottom: theme.spacing(2.5),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ntype NavBarProps = {\r\n    id: string,\r\n    setPage: (num: number) => void,\r\n}\r\n\r\nexport const NavBar = (props: NavBarProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div id={props.id}>\r\n            <h1 className={classes.title}>HSK Practice</h1>\r\n            <div className={classes.description}>Get yourself ready for your HSK Exam by practicing with flashcards.</div>\r\n            <div className={classes.navBar}>\r\n                <hr className={classes.line} />\r\n                <Grid container className={classes.navBar} justify='center'>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(1)}>Level 1</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(2)}>Level 2</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(3)}>Level 3</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(4)}>Level 4</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(5)}>Level 5</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button className={classes.paper} onClick={() => props.setPage(6)}>Level 6</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <hr className={classes.line} style={{ marginBottom: 0 }} />\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport level1 from '../jsontextfiles/level1.json';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    padding: {\r\n        padding: '25px 15px',\r\n        color: theme.palette.text.primary,\r\n    },\r\n}));\r\n\r\ntype bodyWrapperProps = {\r\n    id: string,\r\n    children?: any,\r\n    currentLevel: number,\r\n}\r\n\r\nexport const BodyWrapper = (props: bodyWrapperProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div id={props.id} className={classes.padding}>\r\n            <h3>HSK Level {props.currentLevel}</h3>\r\n            <Grid container>\r\n                {level1 && level1.map((subject, key) => {\r\n                    return (\r\n                        <Grid item xs={3} key={key}>\r\n                            {subject.type}\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React,  { useState } from 'react';\nimport { NavBar } from './components/NavBar';\n// import { makeStyles } from '@material-ui/core';\nimport { BodyWrapper } from './components/BodyWrapper';\n\n/* color scheme \n  primary: #27EE02\n  secondary: #00C700\n  TextDescription: theme.palette.text.secondary\n  TextHeader: theme.palette.text.primary\n*/\n// const useStyles = makeStyles({\n  \n// })\n\nfunction App() {\n  // const classes = useStyles();\n  const [level, setLevel] = useState(1);\n  return (\n    <div id=\"wrapper\">\n      <NavBar id=\"header\" setPage={setLevel} />\n      <BodyWrapper id=\"body-wrapper\" currentLevel={level}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}